<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<!--1 配置连接池: -->
	<!-- 引入外部属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 配置C3P0连接池: -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!--2 Hibernate的相关信息 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 
			如果hibernate.cfg.xml配置文件存在，就需要导入
			<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		-->
		<!-- 如果没有hibernate.cfg.xml配置文件，那就配置Hibernate的其他的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<!-- <prop key="hibernate.connection.autocommit">false</prop> -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 配置Hibernate的映射文件 -->
		<property name="mappingResources">
			<list>
				<value>com/yxd/po/User.hbm.xml</value>
				<value>com/yxd/po/BlogInfo.hbm.xml</value>
				<value>com/yxd/po/Article.hbm.xml</value>
				<value>com/yxd/po/Dianjiliang.hbm.xml</value>
				<value>com/yxd/po/Critique.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 定义HibernateTemplate -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!--3 事务管理: -->
	<!-- 事务管理器 -->
<!-- 	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	开启注解事务
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	开启注解扫描
	<context:component-scan base-package="action,service,dao"></context:component-scan> -->
	
	<!-- Action的配置 ===========================-->
	<bean id="registerAction" class="com.yxd.action.RegisterAction" scope="prototype">
		<property name="userService" ref="userService" />
	</bean>
	<bean id="loginAction" class="com.yxd.action.LoginAction" scope="prototype">
		<property name="userService" ref="userService" />
	</bean>
	<bean id="editBlogInfoAction" class="com.yxd.action.EditBlogInfoAction" scope="prototype">
		<property name="blogInfoService" ref="blogInfoService" />
	</bean>
	
	<bean id="getBlogInfoAction" class="com.yxd.action.GetBlogInfoAction" scope="prototype">
		<property name="blogInfoService" ref="blogInfoService" />
	</bean>
	<bean id="addArticleAction" class="com.yxd.action.AddArticleAction" scope="prototype">
		<property name="articleService" ref="articleService" />
	</bean>
	<bean id="showUserAllArticleAction" class="com.yxd.action.ShowUserAllArticleAction" scope="prototype">
		<property name="articleService" ref="articleService" />
	</bean>
	<bean id="showAllArticleAction" class="com.yxd.action.ShowAllArticleAction" scope="prototype">
		<property name="articleService" ref="articleService" />
	</bean>
	<bean id="showArticleAction" class="com.yxd.action.ShowArticleAction" scope="prototype">
		<property name="articleService" ref="articleService" />
		<property name="dianjiliangService" ref="dianjiliangService" />
		<property name="critiqueService" ref="critiqueService" />
	</bean>
	<bean id="addCritiqueAction" class="com.yxd.action.AddCritiqueAction" scope="prototype">
		<property name="critiqueService" ref="critiqueService" />
	</bean>
	<bean id="photoUploadAction" class="com.yxd.action.PhotoUploadAction" scope="prototype">
		
	</bean>
	<bean id="showPhotoAction" class="com.yxd.action.ShowPhotoAction" scope="prototype">
		
	</bean>
	
	<!-- Service的配置  ===========================-->
	<bean id="userService" class="com.yxd.service.impl.UserServiceImpl">
		<!-- 注入dao -->
		<property name="userDao" ref="userDao"/>
	</bean>
	<bean id="blogInfoService" class="com.yxd.service.impl.BlogInfoServiceImpl">
		<property name="blogInfoDao" ref="blogInfoDao"/>
	</bean>
	<bean id="articleService" class="com.yxd.service.impl.ArticleServiceImpl">
		<property name="articleDao" ref="articleDao"/>
		<property name="critiqueDao" ref="critiqueDao"/>
	</bean>
	<bean id="dianjiliangService" class="com.yxd.service.impl.DianjiliangServiceImpl">
		<property name="dianjiliangDao" ref="dianjiliangDao"/>
	</bean>
	<bean id="critiqueService" class="com.yxd.service.impl.CritiqueServiceImpl">
		<property name="critiqueDao" ref="critiqueDao"/>
	</bean>
	
	<!-- Dao的配置  ===========================-->
	<bean id="userDao" class="com.yxd.dao.impl.UserDAOImpl">
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>
	
	<bean id="blogInfoDao" class="com.yxd.dao.impl.BlogInfoDAOImpl">
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>
	
	<bean id="articleDao" class="com.yxd.dao.impl.ArticleDAOImpl">
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>
	
	<bean id="dianjiliangDao" class="com.yxd.dao.impl.DianjiliangDAOImpl">
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>
	
	<bean id="critiqueDao" class="com.yxd.dao.impl.CritiqueDAOImpl">
		<property name="hibernateTemplate" ref="hibernateTemplate"></property>
	</bean>
	
</beans>
